class BossControl : ZilchComponent
{
    var FightStarted : Boolean = false;
    
    /*Ship moves back and forth slowly in the x this.Direction only, the boss isn't nimble but tanky*/
    [Property]
    var LeftPoint : Real = -5;
    [Property]
    var RightPoint : Real = 5;
    var Accel : Real = 2;
    var MaxVel : Real = 4;
    var Dir : Integer = 1;
    
    /*Super Laser, some reused for death and other lasers*/
    var SuperLaser : Boolean = false;
    var ChargeTimer : Real = 5;
    var ChargeClick : Real = 0.5;
    var ChargePhase : Real = 0;
    var Charge : Boolean = true;
    
    var Fire : Boolean = false;
    var LaserLength : Real = 3;
    var LaserInterval : Real = 0.2;
    
    /*Attack patterns, difficulty based on health*/
    var Difficulty : Integer = 1;
    /*Laser that is aimed at the player*/
    
    var Player : Cog = null;
    var Turret : Cog = null;
    var LeftTurret : Cog = null;
    var RightTurret : Cog = null;
    
    var BehaviorTimer : Real = 0;
    var LastLaser : Real = 0;
    var LastBombs : Real = 0;
    var LastMinions : Real = 0;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
        
        //this.GameSession.CreateNamedSpace("BigLaserSoundSpace", Archetype.Space);
        
        this.Player = this.Space.FindObjectByName("PlayerShip");
        this.Turret = this.Owner.FindChildByName("Turret");
        this.LeftTurret = this.Owner.FindChildByName("LeftTurret");
        this.RightTurret = this.Owner.FindChildByName("RightTurret");
        
        this.LastBombs = (this.Difficulty-9)/2;
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        if(Zero.Keyboard.KeyIsPressed(Keys.B))
        {
            this.Owner.Health.Dead = true;
            this.Owner.BossControl.LaserLength = 2;
            this.Owner.BossControl.LaserInterval = 0.1;
        }
        if(this.Owner.Health.Dead)
        {
            var rand = Random();
            var x = rand.Range(3,-3);
            var y = rand.Range(-3,3);
            var size = rand.Range(0.5, 2);
            if((x > 2) || (x < -2) && y < -1)
            {
                if(rand.CoinFlip())
                {
                    if(x < -2)
                        ++x;
                    else
                        --x;
                }
                else
                {
                    ++y;
                }
            }
            this.LaserInterval -= event.Dt;
            this.LaserLength -= event.Dt;
            if(this.LaserLength < 0)
            {
                this.Space.CreateAtPosition(Archetype.Explosion4, this.Owner.Transform.Translation);
                this.Space.SoundSpace.StopAllSounds();
                this.Space.SoundSpace.PlayCue(SoundCue.Victory);
                this.Owner.Destroy();
            }
            else if(this.LaserInterval < 0)
            {
                this.LaserInterval = 0.1;
                var boom = this.Space.CreateAtPosition(Archetype.Explosion2, this.Owner.Transform.Translation + Real3(x,y,2));
                this.Owner.Transform.Translation += Real3(Real(this.Dir)/2,0,0);
                this.Dir *= -1;
                boom.SphericalParticleEmitter.Size = size;
                this.GameSession.FindSpaceByName("HUDSpace").SoundSpace.PlayCue(SoundCue.Explosion2);
            }
            return;
        }
        else
        {
            
            if (this.FightStarted)
            {
                this.BehaviorTimer += event.Dt;
                if (this.BehaviorTimer > 4) {
                    if(!this.SuperLaser && this.BehaviorTimer >= this.LastLaser+(9 - this.Difficulty))
                    {
                        this.SuperLaser = true;
                    }
                    if(this.BehaviorTimer >= this.LastBombs+(9 - this.Difficulty))
                    {
                        this.LaunchBombs(this.Difficulty);
                        this.LastBombs = this.BehaviorTimer;
                    }
                    if(this.BehaviorTimer >= this.LastMinions+(18 - this.Difficulty*2))
                    {
                        this.DeployMinions();
                        this.LastMinions = this.BehaviorTimer;
                    }
                }
                
                if(this.SuperLaser)
                {
                    this.Turret.BossTurret.Active = false;
                    this.ChargeLaser(event.Dt);
                }
                else 
                {
                    if(!this.Turret.BossTurret.Active)
                        this.Turret.BossTurret.Active = true;
                    /*Patrolling*/
                    //this.Patrol();
                }
                
                var pXPos = this.Player.Transform.Translation.X;
                if (pXPos > this.Owner.Transform.Translation.X+2) {
                    this.RightTurret.BossTurret.Active = true;
                } else {
                    this.RightTurret.BossTurret.Active = false;
                }
                
                if (pXPos < this.Owner.Transform.Translation.X-2) {
                    this.LeftTurret.BossTurret.Active = true;
                } else {
                    this.LeftTurret.BossTurret.Active = false;
                }
            }
            
        }
        
        if(Zero.Keyboard.KeyIsPressed(Keys.P))
        {
            this.DeployMinions();
            
        }
        
        if(Zero.Keyboard.KeyIsPressed(Keys.L))
        {
            this.SuperLaser = true;
            
        }
        
        if(Zero.Keyboard.KeyIsPressed(Keys.O))
        {
            this.LaunchBombs(this.Difficulty);
            
        }
        
        
    }
    function OnCollisionStarted(event : CollisionEvent)
    {
        if(this.Owner.Health.Dead)
            return;
            
        var o = event.OtherObject;
        if(o.DealDamage != null && o.DealDamage.Friendly)
        {
            this.Owner.Health.Decrease(o.DealDamage.Damage);
            var hud = this.Space.LevelSettings.HUDCreator.HUDSpace;
            hud.LevelSettings.HUDReferences.BossHealthBar.Healthbar.Decrease(Real(o.DealDamage.Damage)/this.Owner.Health.MaxHP);
        }
    }
    function Patrol()
    {
        /*determind direction*/
        if(this.Owner.Transform.Translation.X < this.LeftPoint)
        {
            this.Dir = 1;
        }
        else if(this.Owner.Transform.Translation.X > this.RightPoint)
        {
            this.Dir = -1;
        }
        /*determind speed*/
        if(this.Owner.RigidBody.Velocity.X < this.MaxVel*this.Dir)
        {
            this.Owner.RigidBody.Velocity += Real3(this.Accel*this.Dir, 0,0);
        }
        else
        {
            this.Owner.RigidBody.Velocity = Real3(this.MaxVel*this.Dir,0,0);
        }
    }
    function LaunchBombs(difficulty : Integer)
    {
        var rand : Random = Random();
        var x = this.Owner.Transform.Scale.X * 3;
        var y = this.Owner.Transform.Scale.Y;
        var vel = Real3(this.Owner.Transform.Scale.X*0.7,this.Owner.Transform.Scale.Y*-1, 0);
        vel *= Real3(rand.Range(25,45), rand.Range(25,45), 0);
        
        var bomb = this.Space.CreateAtPosition(Archetype.Bomb, this.Owner.Transform.Translation + Real3(x,y,-1));
        bomb.RigidBody.Velocity = vel;
        this.GameSession.FindSpaceByName("HUDSpace").SoundSpace.PlayCue(SoundCue.Laser);
        if (this.Player.Transform.Translation.X > this.Owner.Transform.Translation.X+2) {
            bomb = this.Space.CreateAtPosition(Archetype.Bomb, this.Owner.Transform.Translation + Real3(x,y,-1));
            bomb.RigidBody.Velocity = vel*Real3(1.5, 0.5, 0);
            this.GameSession.FindSpaceByName("HUDSpace").SoundSpace.PlayCue(SoundCue.Laser);
        }
        bomb = this.Space.CreateAtPosition(Archetype.Bomb, this.Owner.Transform.Translation + Real3(-x,y,-1));
        bomb.RigidBody.Velocity = vel * Real3(-1,1,1);
        this.GameSession.FindSpaceByName("HUDSpace").SoundSpace.PlayCue(SoundCue.Laser);
        if (this.Player.Transform.Translation.X < this.Owner.Transform.Translation.X-2) {
            bomb = this.Space.CreateAtPosition(Archetype.Bomb, this.Owner.Transform.Translation + Real3(-x,y,-1));
            bomb.RigidBody.Velocity = vel * Real3(-1.5,0.5,1);
            this.GameSession.FindSpaceByName("HUDSpace").SoundSpace.PlayCue(SoundCue.Laser);
        }
        
        if(difficulty > 2)
        {
            x = this.Owner.Transform.Scale.X * 2.3;
            vel = Real3(this.Owner.Transform.Scale.X*0.2, this.Owner.Transform.Scale.Y*-1, 0);
            vel *= Real3(rand.Range(40,60), rand.Range(40,60), 0);
            
            bomb = this.Space.CreateAtPosition(Archetype.Bomb, this.Owner.Transform.Translation + Real3(x,y,-1));
            bomb.RigidBody.Velocity = vel;
            this.GameSession.FindSpaceByName("HUDSpace").SoundSpace.PlayCue(SoundCue.Laser);
            bomb = this.Space.CreateAtPosition(Archetype.Bomb, this.Owner.Transform.Translation + Real3(-x,y,-1));
            bomb.RigidBody.Velocity = vel * Real3(-1,1,1);
            this.GameSession.FindSpaceByName("HUDSpace").SoundSpace.PlayCue(SoundCue.Laser);
        }
    }
    function ChargeLaser(time : Real)
    {
        if(this.Charge)
        {
            this.ChargeTimer -= time;
            this.ChargeClick -= time;
            if(this.ChargeTimer < 0)
            {
                this.Fire = true;
                this.Charge = false;
                this.ChargeTimer = 5;
                this.ChargeClick = 0.5;
                this.ChargePhase = 0;
                //this.GameSession.FindSpaceByName("BigLaserSoundSpace").SoundSpace.Volume = 1;
                //this.GameSession.FindSpaceByName("BigLaserSoundSpace").SoundSpace.PlayCue(SoundCue.BigLaser);
                this.GameSession.FindSpaceByName("HUDSpace").SoundSpace.PlayCue(SoundCue.BigLaser);
            }
            else
            {
                if((this.ChargeTimer < 1) && this.ChargePhase == 0.2)
                {
                    this.ChargePhase += 0.2;
                }
                else if((this.ChargeTimer < 2) && this.ChargePhase == 0)
                {
                    this.ChargePhase += 0.2;
                }
                
                if(this.ChargeClick < this.ChargePhase)
                {
                    this.Space.CreateAtPosition(Archetype.LaserCharge, this.Owner.Transform.Translation + Real3(0, -4, 0));
                    this.ChargeClick = 0.5;
                }
            }
            
        }
        else
        {
            this.LaserLength -= time;
            this.LaserInterval -= time;
            
            //if (this.LaserLength < 0.5)
                //this.GameSession.FindSpaceByName("BigLaserSoundSpace").SoundSpace.Volume = this.LaserLength*2;
            if(this.LaserLength < 0)
            {
                this.SuperLaser = false;
                this.Charge = true;
                this.LaserLength = 3;
                this.LastLaser = this.BehaviorTimer;
                //this.GameSession.FindSpaceByName("BigLaserSoundSpace").SoundSpace.StopAllSounds();
            }
            else
            {
                if(this.LaserInterval < 0)
                {
                    this.Space.CreateAtPosition(Archetype.GiantLaser, this.Owner.Transform.Translation + Real3(0, -4, 0));
                    this.LaserInterval = 0.1;
                }
            }
        }
    }
    function DeployMinions()
    {
        var minion = this.Space.CreateAtPosition(Archetype.BossMinion, this.Owner.Transform.Translation + Real3(2.5, 0, 0));
        minion.BoxCollider.Ghost = true;
        minion.RigidBody.Velocity = Real3((this.Owner.Transform.Scale.X*0.25) * 50, (-this.Owner.Transform.Scale.Y)*50, 0);
        minion.DragEffect.Drag = 1;
        minion.DragEffect.Active = true;
        
        minion = this.Space.CreateAtPosition(Archetype.BossMinion, this.Owner.Transform.Translation + Real3(-2.5, 0, 0));
        minion.BoxCollider.Ghost = true;
        minion.RigidBody.Velocity = Real3((-this.Owner.Transform.Scale.X*0.25) * 50, (-this.Owner.Transform.Scale.Y)*50, 0);
        minion.DragEffect.Drag = 1;
        minion.DragEffect.Active = true;
    }
}
