class ShipController : ZilchComponent
{
    //[Property]
    //var Invincible : Boolean = false;
    
    
    var Accel : Real = 20;
    var MaxSpeed : Real = 7;
    var BoostSpeed : Real = 12;
    var MaxBoostTime : Real = 2;
    var BoostTime : Real = 0;
    var SideThrustSpeed : Real = 1;
    
    var DeathTimer : Real = 1;
    var RespawnPoint : Real3 = Real3(0,0,0);
    
    var TwinStickLayout : Boolean = true;
    var StickDeadzone : Real = 0.05;
    var TriggerDeadzone : Real = 0.05;
    
    var WASDAllDirections : Boolean = true;
    var OldMousePos : Real3 = Real3();
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
        this.RespawnPoint = this.Owner.Transform.Translation;
        this.BoostTime = this.MaxBoostTime;
    }
       
    function OnCollisionStarted(event : CollisionEvent)
    {
        if(this.Owner.Health.Dead)
            return;
        var o = event.OtherObject;
        if(o.DealDamage != null && !o.DealDamage.Friendly)
        {
            //Console.WriteLine("");
            this.Owner.Health.Decrease(o.DealDamage.Damage);
            if(this.Space.LevelSettings.HUDCreator != null)
            {
                var hud = this.Space.LevelSettings.HUDCreator.HUDSpace;
                hud.LevelSettings.HUDReferences.HealthBar.Healthbar.Decrease(Real(o.DealDamage.Damage)/this.Owner.Health.MaxHP);
            }
        }
    }
    function OnLogicUpdate(event : UpdateEvent)
    {
        //Cheat for demo
        if (Zero.Keyboard.KeyIsDown(Keys.Control) && Zero.Keyboard.KeyIsPressed(Keys.G)) {
            this.Owner.BoxCollider.Ghost = !this.Owner.BoxCollider.Ghost;
            this.GameSession.GameVars.EnemyKills += 75;
        }
        
        if(this.Owner.Health.Dead)
        {
            this.DeathTimer -= event.Dt;
            if(this.DeathTimer < 0)
            {
                this.DeathTimer = 1;
                this.Owner.Health.Respawn(this.RespawnPoint);
                this.Space.LevelSettings.HUDCreator.HUDSpace.LevelSettings.HUDReferences.HealthBar.Healthbar.Increase(1);
            }
            return;
        }
        
        var maxspd = this.MaxSpeed;
        var movement =  Real3(0,0,0);
        var gamepad = Zero.Gamepads.GetGamePad(0);
        if (gamepad.IsActive) {
            if (!this.TwinStickLayout) {
                var pad = Real3(gamepad.LeftStick, 0);
                var padPos = pad+this.Owner.Transform.Translation;
                if (Math.Sqrt(pad.X*pad.X+pad.Y*pad.Y) > this.StickDeadzone)
                    this.Owner.Orientation.LookAtPoint(padPos);
                var angle = this.Owner.Orientation.AbsoluteAngle;
                var dir = Real3(-Math.Sin(angle), Math.Cos(angle), 0);
                //Console.WriteLine("`angle` `dir`");
                
                if (gamepad.LeftTrigger > this.TriggerDeadzone) {
                    movement = dir*gamepad.LeftTrigger;
                }
                
                if (gamepad.IsButtonHeld(Buttons.LeftShoulder)) {
                    this.Owner.DragEffect.Active = true;
                } else {
                    this.Owner.DragEffect.Active = false;
                }
                
                if (this.BoostTime > 0 && gamepad.IsButtonHeld(Buttons.RightShoulder)) {
                    this.BoostTime -= event.Dt;
                    maxspd = this.BoostSpeed;
                } else {
                    this.BoostTime += event.Dt;
                    if (this.BoostTime > this.MaxBoostTime)
                        this.BoostTime = this.MaxBoostTime;
                }
                
                if (gamepad.RightStick.X > this.StickDeadzone || gamepad.RightStick.X < -this.StickDeadzone) {
                    var thrust = dir;
                    //thrust /= Math.Sqrt(thrust.X*thrust.X+thrust.Y*thrust.Y);
                    //newVel += thrust;
                    thrust = Real3(-thrust.Y, thrust.X, 0)*this.SideThrustSpeed*-gamepad.RightStick.X;
                    movement += thrust;
                }
            } else {
                movement = Real3(gamepad.LeftStick, 0);
                var pad = Real3(gamepad.RightStick, 0);
                var padPos = pad+this.Owner.Transform.Translation;
                if (Math.Sqrt(pad.X*pad.X+pad.Y*pad.Y) > this.StickDeadzone)
                    this.Owner.Orientation.LookAtPoint(padPos);
                
                if (this.BoostTime > 0 && gamepad.LeftTrigger > this.TriggerDeadzone) {
                    this.BoostTime -= event.Dt;
                    maxspd = this.BoostSpeed;
                } else {
                    this.BoostTime += event.Dt;
                    if (this.BoostTime > this.MaxBoostTime)
                        this.BoostTime = this.MaxBoostTime;
                }
                
                if (gamepad.IsButtonHeld(Buttons.LeftShoulder)) {
                    this.Owner.DragEffect.Active = true;
                } else {
                    this.Owner.DragEffect.Active = false;
                }
            }
            
            if (gamepad.RightTrigger > this.TriggerDeadzone) {
                this.Owner.Shoot.Shoot(true);
            }
            
        } else {
            var mousePos = this.LevelSettings.CameraViewport.ScreenToWorldZPlane(Zero.Mouse.ScreenPosition, 0.0);
            if (mousePos != this.OldMousePos) {
                this.Owner.Orientation.LookAtPoint(mousePos);
            } else {
                //if (Zero.Keyboard
            }
            this.OldMousePos = mousePos;
            
            if (this.WASDAllDirections) {
                if (Zero.Keyboard.KeyIsDown(Keys.W)) {
                    movement += Real3(0, 1, 0);
                }
                if (Zero.Keyboard.KeyIsDown(Keys.S)) {
                    movement += Real3(0, -1, 0);
                }
                if (Zero.Keyboard.KeyIsDown(Keys.A)) {
                    movement += Real3(-1, 0, 0);
                }
                if (Zero.Keyboard.KeyIsDown(Keys.D)) {
                    movement += Real3(1, 0, 0);
                }
            } else {
                if(Zero.Keyboard.KeyIsDown(Keys.W)) //W to move
                {
                    //this.Owner.DragEffect.Active = true;
                    
                    var vel = (mousePos - this.Owner.Transform.Translation);
                    var dist = Math.Sqrt(vel.X*vel.X+vel.Y*vel.Y);
                    //Console.WriteLine(vel);
                    if (dist > 0.2) {
                        movement = vel/Math.Sqrt(vel.X*vel.X+vel.Y*vel.Y);
                    }
                    if (dist < 1) {
                        movement *= dist*2;
                    }
                    //this.Owner.RigidBody.Velocity = vel/Math.Sqrt(vel.X*vel.X+vel.Y*vel.Y)*10;
                    //Console.WriteLine(this.Owner.Orientation.LocalForward);
                    //Console.WriteLine("Gets here");
                }
                
                if(Zero.Keyboard.KeyIsDown(Keys.A)) {
                    var thrust = (mousePos - this.Owner.Transform.Translation);
                    thrust /= Math.Sqrt(thrust.X*thrust.X+thrust.Y*thrust.Y);
                    //newVel += thrust;
                    thrust = Real3(-thrust.Y, thrust.X, 0)*this.SideThrustSpeed;
                    movement += thrust;
                }
                if(Zero.Keyboard.KeyIsDown(Keys.D)) {
                    var thrust = (mousePos - this.Owner.Transform.Translation);
                    thrust /= Math.Sqrt(thrust.X*thrust.X+thrust.Y*thrust.Y);
                    //newVel += thrust;
                    thrust = Real3(-thrust.Y, thrust.X, 0)*this.SideThrustSpeed*-1;
                    movement += thrust;
                }
            }
            
            if(Zero.Keyboard.KeyIsDown(Keys.Space))
            {
                this.Owner.DragEffect.Active = true;
            }
            else
            {
                this.Owner.DragEffect.Active = false;
            }
            if(this.BoostTime > 0 && Zero.Keyboard.KeyIsDown(Keys.Shift)) {
                this.BoostTime -= event.Dt;
                maxspd = this.BoostSpeed;
            } else {
                this.BoostTime += event.Dt;
                if (this.BoostTime > this.MaxBoostTime)
                    this.BoostTime = this.MaxBoostTime;
            }
            
            /*if(Zero.Keyboard.KeyIsPressed(Keys.F))
            {
                movement = Real3();
                this.Owner.RigidBody.Velocity = Real3();
            }*/
            /*
            if(Zero.Keyboard.KeyIsPressed(Keys.W))
            {
                foreach(var child in this.Owner.Children)
                {
                    child.SpriteParticleSystem.Visible = true;
                }
            }
            else if(Zero.Keyboard.KeyIsReleased(Keys.W))
            {
                foreach(var child in this.Owner.Children)
                {
                    child.SpriteParticleSystem.Visible = false;
                }
            }
            else if(Zero.Keyboard.KeyIsReleased(Keys.F))
            {
                this.Owner.DragEffect.Active = false;
            }*/
            
            /*
            // If I hold down the up arrow key,
            if (Zero.Keyboard.KeyIsDown(Keys.W) || Zero.Keyboard.KeyIsDown(Keys.Up))
            {
                // Record desired upward motion along the world y-axis:
                movement +=  Real3(0.0, 1.0, 0.0);
            }
            // If I hold down the down arrow key,
            if (Zero.Keyboard.KeyIsDown(Keys.Down)|| Zero.Keyboard.KeyIsDown(Keys.S))
                // Record desired downward motion along the world y-axis:
                movement +=  Real3(0.0, -1.0, 0.0);
            
            // If I hold down the right arrow key,
            if (Zero.Keyboard.KeyIsDown(Keys.Right) || Zero.Keyboard.KeyIsDown(Keys.D))
            {
                // Record desired rightward motion along the world x-axis:
                movement +=  Real3(1.0, 0.0, 0.0);
            }
            // If I hold down the left arrow key,
            else if (Zero.Keyboard.KeyIsDown(Keys.Left) || Zero.Keyboard.KeyIsDown(Keys.A))
            {
                // Record desired leftward motion along the world x-axis:
                movement +=  Real3(-1.0, 0.0, 0.0);
            }*/
        
            if (Zero.Mouse.IsButtonDown(MouseButtons.Left))
                this.Owner.Shoot.Shoot(true);
                
        }
            
        this.Owner.RigidBody.Velocity += movement*event.Dt*this.Accel;
        
        
        //this.Owner.Orientation.LocalForward = this.Owner.Orientation.LookAtPoint;
        // Apply the recorded movement to our Transform //* this.Accel *event.Dt;
        var newVel = this.Owner.RigidBody.Velocity;
        /*if (this.Owner.RigidBody.Velocity.X > this.MaxSpeed) newVel.X = this.MaxSpeed;
        if (this.Owner.RigidBody.Velocity.X < -this.MaxSpeed) newVel.X = -this.MaxSpeed;
        if (this.Owner.RigidBody.Velocity.Y > this.MaxSpeed) newVel.Y = this.MaxSpeed;
        if (this.Owner.RigidBody.Velocity.Y < -this.MaxSpeed) newVel.Y = -this.MaxSpeed;*/
        var spd = Math.Sqrt(newVel.X*newVel.X+newVel.Y*newVel.Y);
        if (spd > maxspd) {
            newVel /= (spd/maxspd);
        }
        
        this.Owner.RigidBody.Velocity = newVel; 
        
        if(this.Space.LevelSettings.HUDCreator != null)
            this.Space.LevelSettings.HUDCreator.HUDSpace.LevelSettings.HUDReferences.BoostBar.BoostBar.Set(this.BoostTime/this.MaxBoostTime);
   }
}
