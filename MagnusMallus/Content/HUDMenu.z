class HUDMenu : ZilchComponent
{
    //Options variables
    [Property]
    var OptionsButton : Keys = Keys.Space; //Menu Button
    var OptionsObjects : Cog = null; //Parent of the object group
    var OptionsOpen : Boolean = false; //Is the menu open
    
    var Transitioning : Boolean = false;//if in middle of transition don't do anything
    
    [Property]
    var Button1 : Keys = Keys.I; //Button
    var Group1 : Cog = null; //Objects in the group
    var Open : Boolean = false;
    
    var Timer : Real = 0;
    
    [Property]
    var TransitionTime : Real = 0.5;
    
    var Moving : Boolean = true; //Moving rather than fading
    var ObjectsToMove : Cog = null; //Parent of object group to move
    var FadeAmount : Real = 0; //Amount to fade in
    var FadeTo : Real = 0;
    var DistToMove : Real3 = Real3(0,0,0); //Distance to move objects
    var Destination : Real3 = Real3(0,0,0); //Where objects need to be, snap them in place at the end
    var MoveBool : Boolean = false; //Opening or closing
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        
        this.OptionsObjects = this.Space.FindObjectByName("Help");
        this.Group1 = this.Space.FindObjectByName("MenuBG");
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        //Console.WriteLine("`this.Space.FindObjectByName("Camera").Transform.Translation`");
        //Transition
        if(this.Transitioning) //while doing a menu transition start the clock and disable other transitions
        {
            this.Timer += event.Dt;
            if(this.Timer > this.TransitionTime)
            {
                if(this.OptionsOpen || this.Open)   //if a menu is open turn on the mouse control
                {
                    this.Space.LevelSettings.MouseControl.Active = true;
                }
                
                if(this.ObjectsToMove != null)
                {
                    if(this.Moving)
                        this.ObjectsToMove.Transform.Translation = this.Destination; //snap them to their destination
                    else
                    {
                        if(this.ObjectsToMove.Sprite != null)                        //snap them and all of their kids to their final shade
                        {
                            ///*
                            var c = this.ObjectsToMove.Sprite.Color;
                            this.ObjectsToMove.Sprite.Color = Real4(c.X, c.Y, c.Z, this.FadeTo);
                            foreach(var child in this.ObjectsToMove.Children)
                            {
                                var cc = child.Sprite.Color;
                                child.Sprite.Color = Real4(cc.X,cc.Y,cc.Z, this.FadeTo);
                                if(child.MouseButton != null || child.MouseButtonWithKids != null)
                                {
                                    var childchild = child.FindChildByName("SpriteText");
                                    var ccc = childchild.SpriteText.Color;
                                    childchild.SpriteText.Color = Real4(ccc.X,ccc.Y,ccc.Z, this.FadeTo);
                                }
                            }
                            //*/
                            ///*
                            
                            if(!this.Open)
                            {
                                foreach(var child in this.Group1.Children)
                                {
                                    if(child.MouseButtonWithKids != null)
                                    {
                                        child.MouseButtonWithKids.Deactivate(false);
                                    }
                                }
                            }
                            //*/
                        }
                        else if(this.ObjectsToMove.SpriteText != null)
                        {
                            var c = this.ObjectsToMove.SpriteText.Color;
                            this.ObjectsToMove.SpriteText.Color = Real4(c.X, c.Y, c.Z, this.FadeTo);
                        }
                    }
                }
                    
                this.Timer = 0;             //Reset variables for transition
                this.Transitioning = false;
            }
            else
            {
                var time = event.Dt/this.TransitionTime;    //so that if transition time is small then transition happens faster
                
                if(this.Moving)
                {
                    this.MoveObjects(this.DistToMove*Real3(time,time,time), this.ObjectsToMove, this.MoveBool);
                }
                else
                {
                    this.FadeObjects(this.FadeAmount*time, this.ObjectsToMove);
                }
            }
        }
        if(Zero.Keyboard.KeyIsPressed(Keys.Space))                  //for debugging, show current variables
        {
            Console.WriteLine("\nopen: `this.Open` trans: `this.Transitioning` objs: `this.ObjectsToMove`");
            Console.WriteLine("fadeamount: `this.FadeAmount` moving: `this.Moving` mousecontrol: `this.Space.LevelSettings.MouseControl.Active`");
            Console.WriteLine("optionsopen: `this.OptionsOpen`\n");
        }
        if(!this.OptionsOpen)
        {
            if(Zero.Keyboard.KeyIsPressed(this.OptionsButton) && !this.Transitioning)
            {
                this.OptionsOpen = true;
                this.Transitioning = true;
                
                this.Moving = true;
                
                if(!this.Open)
                {
                    //this.Space.LevelSettings.HUDReferences.MainSpaceRef.TimeSpace.TogglePause();
                }
                
                this.ObjectsToMove = this.OptionsObjects;
                this.DistToMove = Real3(0,15,0);
                this.Destination = this.OptionsObjects.Transform.Translation - this.DistToMove;
                this.MoveBool = this.OptionsOpen;
            }
            else if(Zero.Keyboard.KeyIsPressed(this.Button1) && !this.Transitioning && !this.Open)
            {
                this.Open = true;
                this.Transitioning = true;
                
                this.Moving = false;
                
                //this.Space.LevelSettings.HUDReferences.MainSpaceRef.TimeSpace.TogglePause();
                
                this.ObjectsToMove = this.Group1;
                this.FadeAmount = 1;
                this.FadeTo = 1;
                this.MoveBool = this.Open;
            }
            else if(Zero.Keyboard.KeyIsPressed(this.Button1) && !this.Transitioning)
            {
                this.Open = false;
                this.Transitioning = true;
                
                this.Moving = false;
                
                this.Close();
                
                this.ObjectsToMove = this.Group1;
                this.FadeAmount = -1;
                this.FadeTo = 0;
                this.MoveBool = this.Open;
            }
        }
        else if(Zero.Keyboard.KeyIsPressed(this.OptionsButton) && !this.Transitioning)
        {
            this.OptionsOpen = false;
            this.Transitioning = true;
            
            this.Close();
            
            this.ObjectsToMove = this.OptionsObjects;
            this.DistToMove = Real3(0,15,0);
            this.Destination = this.OptionsObjects.Transform.Translation + this.DistToMove;
            this.MoveBool = this.OptionsOpen;
        }
    }
    function Close()
    {
        if(!this.OptionsOpen && !this.Open) //If no menus are open, turn off mouse control and unpause game
        {
            //this.Space.LevelSettings.HUDReferences.MainSpaceRef.TimeSpace.TogglePause();
            this.Space.LevelSettings.MouseControl.Active = false;
        }
    }
    function MoveObjects(amnt : Real3, grp : Cog, open : Boolean)
    {
        if(grp == null)
            return;
        var parent = grp;
        if(open)
                parent.Transform.Translation -= amnt;
            else
                parent.Transform.Translation += amnt;
        
        //Console.WriteLine("`parent.Transform.Translation`");
    }
    function FadeObjects(fade : Real, grp : Cog)
    {
        if(grp == null)
            return;
        var parent = grp;
        if(parent.Sprite != null)
        {
            parent.Sprite.Color += Real4(0,0,0, fade);
        }
        foreach(var child in parent.Children)
        {
            child.Sprite.Color += Real4(0,0,0, fade);
            
            if(child.MouseButton != null || child.MouseButtonWithKids != null)
            {
                child.FindChildByName("SpriteText").SpriteText.Color += Real4(0,0,0, fade);
            }
            if(child.MouseButtonWithKids != null)
            {
                this.FadeKids(fade, child);
            }
        }
    }
    function FadeKids(fade : Real, child : Cog)
    {
        foreach(var kid in child.Children)
        {
            if(kid.Sprite != null)
                kid.Sprite.Color += Real4(0,0,0, fade);
            if(kid.SpriteText != null)
                kid.SpriteText.Color += Real4(0,0,0, fade);
                
            if(kid.MouseButtonWithKids != null)
            {
                this.FadeKids(fade, kid);
            }
        }
    }
}
