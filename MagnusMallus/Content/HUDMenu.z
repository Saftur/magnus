class HUDMenu : ZilchComponent
{
    [Property]
    var OptionsButton : Keys = Keys.Escape;
    
    var NumOptions : Integer = 0;
    var OptionsObjects : Cog = null; //Parent of the object group
    
    
    var Open : Boolean = false;
    var Opening : Boolean = false;
    
    [Property]
    var Distance1 : Real3 = Real3(0,-10,0);
    
    [Property]
    var Button1 : Keys = Keys.Right;
    
    var Group1 : Array[Cog] = Array[Cog](); //Objects in the group
    
    var Timer : Real = 0;
    
    [Property]
    var TransitionTime : Real = 1;
    
    
    var ObjectsToMove : Cog = null; //Parent of object group to move
    var DistToMove : Real3 = Real3(0,0,0); //Distance to move objects
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        
        this.OptionsObjects = this.Space.FindObjectByName("Start");
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        Console.WriteLine("`this.Space.FindObjectByName("Camera").Transform.Translation`");
        //Transition
        if(this.Opening)
        {
            this.Timer += event.Dt;
            if(this.Timer > this.TransitionTime)
            {
                this.Timer = 0;
                this.Opening = false;
            }
            else
            {
                this.MoveObjects(this.DistToMove*Real3(event.Dt,event.Dt,event.Dt), this.ObjectsToMove);
            }
        }
        
        if(!this.Open && !this.Opening && Zero.Keyboard.KeyIsPressed(this.OptionsButton))
        {
            this.Open = true;
            this.Opening = true;
            //this.Space.LevelSettings.HUDReferences.MainSpaceRef.TimeSpace.TogglePause();
            this.ObjectsToMove = this.OptionsObjects;
            this.DistToMove = this.Distance1;
        }
        else if(!this.Opening && Zero.Keyboard.KeyIsPressed(this.OptionsButton))
        {
            this.Open = false;
            this.Opening = true;
            //this.Space.LevelSettings.HUDReferences.MainSpaceRef.TimeSpace.TogglePause();
        }
        
    }
    function MoveObjects(amnt : Real3, grp : Cog)
    {
        var parent = grp;
        if(this.Open)
                parent.Transform.Translation -= amnt;
            else
                parent.Transform.Translation += amnt;
        foreach(var o in parent.Children)
        {
            //Movement
            if(this.Open)
                o.Transform.Translation -= amnt;
            else
                o.Transform.Translation += amnt;
        }
    }
}
