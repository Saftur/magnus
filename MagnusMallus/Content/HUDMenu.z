// Authors: Charles duMars
// All content Â© 2017 DigiPen (USA) Corporation, all rights reserved.
class HUDMenu : ZilchComponent
{
    //Options variables
    var OptionsButton : Keys = Keys.T; //Menu Button
    var OptionsObjects : Cog = null; //Parent of the object group
    var OptionsOpen : Boolean = false; //Is the menu open
    
    var Transitioning : Boolean = false;//if in middle of transition don't do anything
    
    var Button1 : Keys = Keys.C; //Button
    var MainMenu : Cog = null; //Objects in the group
    var Open : Boolean = false;
    
    var EnterPlanetButtons : Cog = null;
    var Entering : Boolean = false;
    
    var LoadingScreen : Cog = null;
    var Enter : Boolean = false;
    
    var Timer : Real = 0;
    
    [Property]
    var TransitionTime : Real = 0.5;
    
    var ObjectsToMove : Cog = null; //Parent of object group to move
    var DistToMove : Real3 = Real3(0,0,0); //Distance to move objects
    var Destination : Real3 = Real3(0,0,0); //Where objects need to be, snap them in place at the end
    
    var Name : String = "";
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        
        this.OptionsObjects = this.Space.FindObjectByName("Help");
        Console.WriteLine("`this.OptionsObjects.Transform.Translation`");
        
        this.MainMenu = this.Space.FindObjectByName("MenuBG");        //If it's going to fade set the fade time to the transition time
        this.MainMenu.Fade.Time = this.TransitionTime;
        
        this.EnterPlanetButtons = this.Space.FindObjectByName("PlanetYes");
        this.EnterPlanetButtons.Fade.Time = this.TransitionTime;
        
        this.LoadingScreen = this.Space.FindObjectByName("LoadScreen");
        this.LoadingScreen.Fade.Time = this.TransitionTime;
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        //Console.WriteLine("`this.Space.FindObjectByName("Camera").Transform.Translation`");
        //Transition
        if(this.Transitioning) //while doing a menu transition start the clock and disable other transitions
        {
            this.Timer += event.Dt;
            if(this.Timer > this.TransitionTime)
            {
                if(this.OptionsOpen || this.Open)   //if a menu is open turn on the mouse control
                {
                    this.Space.LevelSettings.MouseControl.Active = true;
                }
                if(this.Entering)
                {
                    this.EnterPlanetButtons.BoxCollider.SendsEvents = true;
                    foreach(var child in this.EnterPlanetButtons.Children)
                    {
                        if(child.BoxCollider != null)
                            child.BoxCollider.SendsEvents = true;
                    }
                }
                if(this.ObjectsToMove != null)
                {
                    this.ObjectsToMove.Transform.Translation = this.Destination; //snap them to their destination
                    this.ObjectsToMove = null;
                }
                
                this.Timer = 0;             //Reset variables for transition
                this.Transitioning = false;
                
                /*Second Phases*/
                if(this.Enter)
                {
                    this.Space.LevelSettings.HUDReferences.CurrentPlanet.PlanetEnter.EnterPlanet();
                }
            }
            else if(this.ObjectsToMove != null)
            {
                var time = event.Dt/this.TransitionTime;    //so that if transition time is small then transition happens faster
                
                this.MoveObjects(this.DistToMove*Real3(time,time,time), this.ObjectsToMove);
            }
        }
        if(Zero.Keyboard.KeyIsPressed(Keys.Tab))                  //for debugging, show current variables
        {
            Console.WriteLine("\nopen: `this.Open` trans: `this.Transitioning` objs: `this.ObjectsToMove`");
            Console.WriteLine(" mousecontrol: `this.Space.LevelSettings.MouseControl.Active`");
            Console.WriteLine("optionsopen: `this.OptionsOpen`\n");
            Console.WriteLine("`this.Space.LevelSettings.MouseControl`");
            foreach(var child in this.MainMenu.Children)
            {
                Console.WriteLine("`child` `child.Sprite.Color`");
                if(child.Name == "CrewTab")
                {
                    foreach(var c in child.Children)
                    {
                        foreach(var kid in c.Children)
                        {
                            if(kid.Healthbar != null)
                            {
                                Console.WriteLine("parent: `kid.Parent` vis: `kid.Sprite.Visible` trans: `kid.Transform.Translation`, color: `kid.Sprite.Color`");
                            }
                        }
                    }
                }
            }
        }
        
        if(!this.Transitioning && !this.Entering)
        {
            if(!this.OptionsOpen)
            {
                if(Zero.Keyboard.KeyIsPressed(this.OptionsButton))
                {
                    this.OptionsOpen = true;
                    this.Transitioning = true;
                    
                    if(!this.Open)
                    {
                        //this.Space.LevelSettings.HUDReferences.MainSpaceRef.TimeSpace.TogglePause();
                    }
                    
                    this.ObjectsToMove = this.OptionsObjects;
                    this.DistToMove = Real3(0,-15,0);
                    Console.WriteLine("`this.ObjectsToMove.Transform.Translation`");
                    this.Destination = this.OptionsObjects.Transform.Translation + this.DistToMove;
                    Console.WriteLine("`this.Destination` `this.DistToMove`");
                }
                else if(Zero.Keyboard.KeyIsPressed(this.Button1) && !this.Open)
                {
                    this.Open = true;
                    this.Transitioning = true;
                    
                    //this.Space.LevelSettings.HUDReferences.MainSpaceRef.TimeSpace.TogglePause();
                    
                    this.MainMenu.Fade.StartFade = true;
                }
                else if(Zero.Keyboard.KeyIsPressed(this.Button1))
                {
                    this.Open = false;
                    this.Transitioning = true;
                    
                    this.Close();
                    
                    this.MainMenu.Fade.StartFade = true;
                    
                    foreach(var child in this.MainMenu.Children)
                    {
                        if(child.MouseButtonWithKids != null)
                        {
                            child.MouseButtonWithKids.Deactivate(true);
                        }
                    }
                    this.Space.LevelSettings.MouseControl.CurrentTab = null;
                    this.Space.LevelSettings.MouseControl.CurrButton = null;
                }
            }
            else if(Zero.Keyboard.KeyIsPressed(this.OptionsButton))
            {
                this.OptionsOpen = false;
                this.Transitioning = true;
                
                this.Close();
                
                this.ObjectsToMove = this.OptionsObjects;
                this.DistToMove = Real3(0,15,0);
                this.Destination = this.OptionsObjects.Transform.Translation + this.DistToMove;
            }
        }
    }
    function Close()
    {
        if(!this.OptionsOpen && !this.Open) //If no menus are open, turn off mouse control and unpause game
        {
            //Console.WriteLine("hi");
            //this.Space.LevelSettings.HUDReferences.MainSpaceRef.TimeSpace.TogglePause();
            this.Space.LevelSettings.MouseControl.Active = false;
        }
    }
    function MoveObjects(amnt : Real3, grp : Cog)
    {
        if(grp == null)
            return;
        grp.Transform.Translation += amnt;
        //Console.WriteLine("`grp` `grp.Transform.Translation`");
    }
    function EnteringPlanet(enter : Boolean)
    {
        if(enter)
        {
            this.Entering = true;
            this.Transitioning = true;
            //this.Space.LevelSettings.HUDReferences.MainSpaceRef.TimeSpace.TogglePause();
            this.Space.LevelSettings.MouseControl.Active = true;
            
            this.EnterPlanetButtons.Fade.StartFade = true;
        }
        else
        {
            this.Entering = false;
            this.Transitioning = true;
            
            this.Close();
            
            this.EnterPlanetButtons.Fade.StartFade = true;
        }
    }
    function EnterPlanet()
    {
        this.Transitioning = true;
        
        this.LoadingScreen.Fade.StartFade = true;
        this.Enter = true;
    }
    
    /*
    function NameForScore(character : String)
    {
        if(character == "-")
        {
            var a = this.Name.Count - 1;
            if(a < 0)
            {
                a = 0;
            }
            this.Name = this.Name.SubStringFromRuneIndices(0, a);
        }
        else if(this.Name.Count < 7)
        {
            this.Name = String.Concatenate(this.Name, character);
        }
        this.NameDisplay.SpriteText.Text = this.Name;
    }
    function NameInput()
    {
        if(Zero.Keyboard.KeyIsPressed(Keys.A))
        {
            this.NameForScore("A");
        }
        else if(Zero.Keyboard.KeyIsPressed(Keys.B))
        {
            this.NameForScore("B");
        }
        else if(Zero.Keyboard.KeyIsPressed(Keys.C))
        {
            this.NameForScore("C");
        }
        else if(Zero.Keyboard.KeyIsPressed(Keys.D))
        {
            this.NameForScore("D");
        }
        else if(Zero.Keyboard.KeyIsPressed(Keys.E))
        {
            this.NameForScore("E");
        }
        else if(Zero.Keyboard.KeyIsPressed(Keys.F))
        {
            this.NameForScore("F");
        }
        else if(Zero.Keyboard.KeyIsPressed(Keys.G))
        {
            this.NameForScore("G");
        }
        else if(Zero.Keyboard.KeyIsPressed(Keys.H))
        {
            this.NameForScore("H");
        }
        else if(Zero.Keyboard.KeyIsPressed(Keys.I))
        {
            this.NameForScore("I");
        }
        else if(Zero.Keyboard.KeyIsPressed(Keys.J))
        {
            this.NameForScore("J");
        }
        else if(Zero.Keyboard.KeyIsPressed(Keys.K))
        {
            this.NameForScore("K");
        }
        else if(Zero.Keyboard.KeyIsPressed(Keys.L))
        {
            this.NameForScore("L");
        }
        else if(Zero.Keyboard.KeyIsPressed(Keys.M))
        {
            this.NameForScore("M");
        }
        else if(Zero.Keyboard.KeyIsPressed(Keys.N))
        {
            this.NameForScore("N");
        }
        else if(Zero.Keyboard.KeyIsPressed(Keys.O))
        {
            this.NameForScore("O");
        }
        else if(Zero.Keyboard.KeyIsPressed(Keys.P))
        {
            this.NameForScore("P");
        }
        else if(Zero.Keyboard.KeyIsPressed(Keys.Q))
        {
            this.NameForScore("Q");
        }
        else if(Zero.Keyboard.KeyIsPressed(Keys.R))
        {
            this.NameForScore("R");
        }
        else if(Zero.Keyboard.KeyIsPressed(Keys.S))
        {
            this.NameForScore("S");
        }
        else if(Zero.Keyboard.KeyIsPressed(Keys.T))
        {
            this.NameForScore("T");
        }
        else if(Zero.Keyboard.KeyIsPressed(Keys.U))
        {
            this.NameForScore("U");
        }
        else if(Zero.Keyboard.KeyIsPressed(Keys.V))
        {
            this.NameForScore("V");
        }
        else if(Zero.Keyboard.KeyIsPressed(Keys.W))
        {
            this.NameForScore("W");
        }
        else if(Zero.Keyboard.KeyIsPressed(Keys.X))
        {
            this.NameForScore("X");
        }
        else if(Zero.Keyboard.KeyIsPressed(Keys.Y))
        {
            this.NameForScore("Y");
        }
        else if(Zero.Keyboard.KeyIsPressed(Keys.Z))
        {
            this.NameForScore("Z");
        }
        else if(Zero.Keyboard.KeyIsPressed(Keys.Back))
        {
            this.NameForScore("-");
        }
    }
    */
}
