class Health : ZilchComponent
{
    [Property]
    var MaxHP : Integer = 5;
    [Property]
    var Respawns : Boolean = false;
    [Property]
    var DeathParticle : Archetype = Archetype.Explosion;
    
    var CurrHP : Integer = 0;
    var Dead : Boolean = false;
    
    function Initialize(init : CogInitializer)
    {
        this.CurrHP = this.MaxHP;
    }
    function Decrease(amnt : Integer)
    {
        if(this.CurrHP - amnt > 0)
        {
            this.CurrHP -= amnt;
        }
        else if(this.Respawns)
        {
            //Boolean for other scripts to stop
            this.Dead = true;
            //Make the player and any children invisible
            this.Owner.Sprite.Visible = false;
            foreach(var child in this.Owner.Children)
            {
                /*
                if(child.Sprite != null)
                {
                    child.Sprite.Visible = true;
                }*/
                if(child.SpriteParticleSystem != null)
                {
                    child.SpriteParticleSystem.Visible = false;
                }
                /*
                else if(child.SpriteText != null)
                {
                    
                }*/
            }
            //Stop player, turn off collider, create particle to signal death
            this.Owner.RigidBody.Velocity = Real3(0,0,0);
            this.Owner.BoxCollider.SendsEvents = false;
            this.Space.CreateAtPosition(this.DeathParticle, this.Owner.Transform.Translation);
        }
        else
        {
            this.Destroy();
        }
    }
    function Increase(amnt : Integer)
    {
        if(this.CurrHP + amnt > this.MaxHP)
        {
            this.CurrHP += amnt;
        }
        else
        {
            this.CurrHP = this.MaxHP;
        }
    }
    function Respawn(spawnPos : Real3)
    {
        //Undo death booleans
        this.Dead = false;
        this.Owner.Sprite.Visible = true;
        this.Owner.BoxCollider.SendsEvents = true;
        foreach(var child in this.Owner.Children)
        {
            if(child.Sprite != null)
            {
                child.Sprite.Visible = true;
            }
            if(child.SpriteParticleSystem != null)
            {
                child.SpriteParticleSystem.Visible = true;
            }
            /*
            else if(child.SpriteText != null)
            {
                
            }*/
        }
        //Relocate player to respawn point
        this.Owner.Transform.Translation = spawnPos;
        //Refill HP
        this.CurrHP = this.MaxHP;
    }
    function Destroy()
    {
        if(this.Owner.BossControl != null) //Special case enemy
        {
            this.Dead = true;
            this.Owner.BossControl.LaserInterval = 0.1;
            this.Owner.BossControl.LaserLength = 2;
            return;
        }
        else if(this.Owner.MinionAI_1 != null)
        {
            this.GameSession.GameVars.EnemyKills += 1;
        }
        this.Space.CreateAtPosition(this.DeathParticle, this.Owner.Transform.Translation);
        this.GameSession.FindSpaceByName("HUDSpace").SoundSpace.PlayCue(SoundCue.Explosion2);
        this.Owner.Destroy();
    }
}
